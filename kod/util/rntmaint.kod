% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
RentableRoomMaintenance is UtilityFunctions

constants:
   
   include blakston.khd

resources:

   RoomMaintenance_room_already = "You already have a room here."
   RoomMaintenance_no_rental_fee = "You have no money to rent a room."

   RoomMaintenance_key_copied = "Here is a copy of your room key."
   RoomMaintenance_no_key = "Where is the key from this inn to copy?"
   RoomMaintenance_no_copy_copy = "You may not copy a copy of a room key."
   RoomMaintenance_copy_no_money = "You cannot afford a copy of your room key."
   RoomMaintenance_change_lock = \
      "Very well, I'll change the lock to your room.  This will destroy all "
      "existing copies of your room key."
   RoomMaintenance_no_copies_change_lock = \
      "There aren't currently any copies of your room key out in circulation."
   RoomMaintenance_no_key_change_lock = \
      "You don't even have a room here, so how could I change the lock?"
   RoomMaintenance_help_message = \
      "~BHelp Room:~B  Displays this message.\n"
      "~BRent Room:~B  Rents a room at this particular location.  ~ICost: %i~I\n"
      "~BCopy Key:~B  Creates a tradeable copy of your room key.  ~ICost: %i~I\n"
      "~BChange Lock:~B  Destroys all copies of your room key in circulation.\n"
      "~BRent:~B  Displays the amount of time remaining for your room.\n"
      "To buy additional time, offer shillings to the innkeeper.  ~ICost: %i "
      "per Meridian day (2 hours real time), %i Meridian days maximum.~I"

properties:

   plHoldingDuringRecreate = $
   plRoomsRented = $
   % Max number of days a room can be rented for at one time. ~20 offline days.
   piRentableDaysMax = 240

messages: 

   Constructor()
   {
      Send(self,@Recreate);
      return;
   }

   Recreate()
   {
      return;
   }

   HoldRoomsDuringRecreate()
   {
      local i, oRoom;
      
      plHoldingDuringRecreate = $;
      
      for i in plRoomsRented
      {
         oRoom = send(SYS,@FindRoomByNum,#num=i);
         plHoldingDuringRecreate = cons(oRoom,plHoldingDuringRecreate);
         send(SYS,@DeleteRoom,#what=oRoom);
      }
     
      return;
   }

   ReattachRentableRooms()
   {
      local i;
      
      for i in plHoldingDuringRecreate
      {
         send(SYS,@ReattachRoom,#oRoom=i);
      }
      
      plHoldingDuringRecreate = $;
      
      return;
   }

   RentRoom(who=$,iLocation=$,iCost=5000)
   {
      local iRID, oRoom, oMoney;
      
      % check if the player already has a room.  If so, complain and bail.
      oRoom = send(self,@FindRoomByPlayer,#who=who,#iLocation=iLocation);
      if oRoom <> $ 
      {
         return RoomMaintenance_room_already;
      }

      % check for the fee.  If too poor, complain and bail.
      oMoney = send(who,@GetMoneyObject);
         
      if oMoney = $ OR send(oMoney,@GetNumber) < iCost
      {
         return RoomMaintenance_no_rental_fee;
      }

      % deduct the fee
      send(oMoney,@SubtractNumber,#number=iCost);

      % set up the room
      iRID = send(self,@GetNextAvailableRID,#iLocation=iLocation);
      Send(SYS,@CreateOneRoomIfNew,#num=iRID,#class=send(self,@GetRoomClassByLocation,#iLocation=iLocation));
      send(send(SYS,@FindRoomByNum,#num=iRID),@SetRenter,#who=who);
      plRoomsRented = cons(iRID,plRoomsRented);

      % create the key and give it to the player
      send(who,@NewHold,#what=Create(&RoomKey,#iRID=iRID));

      % Return $ so that the innkeeper gives a friendly message in the local flavor.
      return $;
   }

   ChangeLock(who=$, iLocation=$)
   {
      local lPassive, oObject, oKey, bHasRoomKey;

      % Check for gold room key.
      bHasRoomKey = FALSE;
      lPassive = Send(who, @GetHolderPassive);

      for oObject in lPassive
      {
         oKey = oObject;
         if IsClass(oKey, &RoomKey)
         {
            if IsClass(Send(SYS, @FindRoomByNum, #num=Send(oKey, @GetRID)),
               Send(self, @GetRoomClassByLocation, #iLocation=iLocation))
            {
               bHasRoomKey = TRUE;
               break;
            }
         }
      }

      if bHasRoomKey
      {
         % See if there are any copies of this key present
         if Send(oKey, @HasCopies)
         {
            % Great, now delete them
            Send(oKey, @DeleteCopies);
            return RoomMaintenance_change_lock;
         }
         else
         {
            % No copies out?  Okay tell them.
            return RoomMaintenance_no_copies_change_lock;
         }      }

      % No key?  Tell them they can't change the lock on a room they don't have.
      return RoomMaintenance_no_key_change_lock;
   }

   CopyKey(who=$,iLocation=$,iCost=500)
   {
      local lPassive, oObject, oKey, bHasRoomKey, bFound, oMoney;
      
      % check if the player has a gold key.
      bHasRoomKey = FALSE;
      bFound = FALSE;
      lPassive = send(who,@GetHolderPassive);

      for oObject in lPassive
      {
         oKey = send(who,@HolderExtractObject,#data=oObject);
         
         % Is it from the proper inn?
         if IsClass(oKey,&RoomKey)
         {
            bHasRoomKey = TRUE;

            if IsClass(send(SYS,@FindRoomByNum,#num=Send(oKey,@GetRID)),
                        send(self,@GetRoomClassByLocation,#iLocation=iLocation))
            {
               bFound = TRUE;

               break;
            }
         }
      }
            
      if not bFound
      {
         % If not found, check if player has silver key.  
         oKey = send(who,@FindHolding,#class=&RoomKeyCopy);
         if oKey <> $ AND NOT bHasRoomKey
         {
            % If so, complain and bail.
            return RoomMaintenance_no_copy_copy;
         }
         else
         {
            % If not, complain and bail.
            return RoomMaintenance_no_key;
         }
      }
            
      % check for the fee.  If too poor, complain and bail.
      oMoney = send(who,@GetMoneyObject);
            
      if oMoney = $ OR send(oMoney,@GetNumber) < iCost
      {
         return RoomMaintenance_copy_no_money;
      }
            
      % deduct the fee
      send(oMoney,@SubtractNumber,#number=iCost);

      % copy the key and give it to the player.
      send(who,@NewHold,#what=send(oKey,@Copy));

      return RoomMaintenance_key_copied;
   }

   GetHelpMessage(who=$, iRentCost=$, iCopyCost=$, iDayCost=$)
   {
      if who <> $ AND iRentCost <> $ AND iCopyCost <>$ AND iDayCost <> $
      {
         Send(who, @MsgSendUser, #message_rsc=RoomMaintenance_help_message,
            #parm1=iRentCost, #parm2=iCopyCost, #parm3=iDayCost, #parm4=piRentableDaysMax);
      }
      return;
   }

   CheckRent(who=$, iLocation=$)
   {
      local oRoom;

      oRoom = Send(self, @FindRoomByPlayer, #who=who, #iLocation=iLocation);

      % If there's no room, do nothing
      if oRoom = $
      {
        return;
      }

      return Send(oRoom, @GetDaysLeft);
   }

   GotRent(who=$,iAmount=0,iCost=150,iLocation=$)
   {
      local oMoney, iDays, oRoom, iDaysLeft;

      oRoom = send(self,@FindRoomByPlayer,#who=who,#iLocation=iLocation);

      % No room?  Return out and do nothing.
      if oRoom = $ 
      {
         return $;
      }

      iDays = iAmount / iCost;

      % Make sure we don't go over max.
      if send(oRoom,@GetDaysLeft) + iDays > piRentableDaysMax
      {
         iDays = piRentableDaysMax - send(oRoom,@GetDaysLeft);
         % Returning 0 gives up the special error message.
         if iDays <= 0
         {
            return 0;
         }
      }

      % Did they even pay us enough for 1 additional day?  Cheap bastards!
      if iDays <= 0
      {
         return $;
      }

      % Set the amount to the even cost.
      iAmount = iDays * iCost;

      oMoney = Send(who,@GetMoneyObject);

      if oMoney = $ OR Send(oMoney,@GetNumber) < iAmount
      {
         % Something wierd went on here.  Don't give a message, just bail.
         return $;
      }

      Send(oMoney,@SubtractNumber,#number=iAmount);

      % RenewRental returns the new days left.
      return send(oRoom,@RenewRental,#iTimeAdded=iDays);
   }      

   FindRoomByPlayer(who=$,iLocation=$)
   {
      local iRID, oRoom, bRented, cRoomClass;

      cRoomClass = send(self,@GetRoomClassByLocation,#iLocation=iLocation);
      oRoom = $;
      bRented = FALSE;

      for iRID in plRoomsRented
      {
         oRoom = send(SYS,@FindRoomByNum,#num=iRID);
         if send(oRoom,@GetRenter) = who
            AND IsClass(oRoom,cRoomClass)
         {
            return oRoom;
         }
      }

      return $;
   }

   GetNextAvailableRID(iLocation=$)
   {
      local iRID;

      iRID = RID_RENTABLE_START;

      if plRoomsRented = $
      {
         return iRID;
      }
      
      while TRUE  % Keep going until we find something!
      {
         if NOT FindListElem(plRoomsRented,iRID)
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }
      
      return 0;
   }

   RoomDeleted(what=$)
   {
      local lRoomsRented, iRID;

      iRID = send(what,@GetRoomNum);

      if FindListElem(plRoomsRented,iRID)
      {
         plRoomsRented = DelListElem(plRoomsRented,iRID);
      }
      else
      {
         DEBUG("RoomDeleted:: Tried to remove an unlisted room.");
      }

      return;
   }

   NewDay()
   {
      local i;

      for i in plRoomsRented
      {
         send(send(SYS,@FindRoomByNum,#num=i),@DecrementDaysLeft);
      }

      return;
   }

   GetRoomClassByLocation(iLocation=$)
   {
      if iLocation = RID_BAR_INN
      {
         return &BarloqueRentableRoom;
      }

      if iLocation = RID_MAR_INN
      {
         return &MarionRentableRoom;
      }

      if iLocation = RID_KOC_INN
      {
         return &KocatanRentableRoom;
      }
      
      return &Room;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
