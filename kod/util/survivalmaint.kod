% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
SurvivalRoomMaintenance is UtilityFunctions

constants:

   include blakston.khd

resources:

   public_survival_started = \
      "%s has started a public co-op survival arena. It will begin in "
      "five minutes."
   
   public_ended = \
      "The public co-op survival arena has ended at level %i."

properties:

   plSurvivalRooms = $
   
   % Are Surival Arenas active?
   piPublicSurvivalEnabled = FALSE
   piSoloSurvivalEnabled = FALSE
   piGuildSurvivalEnabled = FALSE
   
   % Do survival arenas give these rewards?
   piSurvivalXP = TRUE
   piSurvivalCash = TRUE
   piSurvivalTP = TRUE
   piSurvivalLoot = TRUE
   
   % Don't use these rooms (list of RIDs)
   plExcludedRoomsList = $

messages:

   Constructor()
   {
      Send(self,@Recreate);
      
      plExcludedRoomsList = [RID_MAR_SMITHY,
                             RID_MAR_ELDER_HUT,
                             RID_SEWER_KING,
                             RID_TEMPLE_RIIJA,
                             RID_MAR_CRYPT3A];

      return;
   }

   Recreate()
   {
      return;
   }
   
   CreateRoom(who=$,guild_survival=FALSE,iPublic=FALSE)
   {
      local poRoom, poBaseRoom, plAllRooms, iRID, i, plPlayersLoggedOn, z,
            plExcludedRoomsObjs;
      
      if guild_survival = TRUE
         AND NOT piGuildSurvivalEnabled
      {
         return $;
      }
      
      if iPublic = TRUE
         AND NOT piPublicSurvivalEnabled
      {
         return $;
      }
      
      if iPublic = FALSE
         AND guild_survival = FALSE
         AND NOT piSoloSurvivalEnabled
      {
         return $;
      }
      
      plAllRooms = Send(SYS,@ListCopy,#source=Send(SYS,@GetRooms));
      
      plExcludedRoomsObjs = $;
      for z in plExcludedRoomsList
      {
         plExcludedRoomsObjs = Cons(plExcludedRoomsObjs,
                                    Send(SYS,@FindRoomByNum,#num=z));
      }

      poBaseRoom = Nth(plAllRooms,Random(1,Length(plAllRooms)));
      
      % Ensure it's a monster room, and shrink the list on every failure.
      if NOT IsClass(poBaseRoom,&MonsterRoom)
         OR IsClass(poBaseRoom,&SurvivalRoom)
         OR FindListElem(plExcludedRoomsList,poBaseRoom)
      {
         while NOT IsClass(poBaseRoom,&MonsterRoom)
            OR IsClass(poBaseRoom,&SurvivalRoom)
            OR FindListElem(plExcludedRoomsList,poBaseRoom)
         {
            plAllRooms = DelListElem(plAllRooms,poBaseRoom);
            poBaseRoom = Nth(plAllRooms,Random(1,Length(plAllRooms)));
         }
      }
      
      if NOT IsClass(poBaseRoom,&MonsterRoom)
      {
         return $;
      }
      
      iRID = Send(self,@GetNextAvailableRID);
      
      if iRID = 0
      {
         return $;
      }
      
      if guild_survival
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,
               #class=&SurvivalRoom,
               #poGuild=Send(who,@GetGuild),
               #base_room=poBaseRoom);
      }
      else
      {
         Send(SYS,@CreateOneRoomIfNew,#num=iRID,
               #class=&SurvivalRoom,
               #iPublic=iPublic,
               #base_room=poBaseRoom);
      }

      poRoom = Send(SYS,@FindRoomByNum,#num=iRID);
      
      if poRoom <> $
      {
         plSurvivalRooms = Cons(poRoom,plSurvivalRooms);
         Send(Send(SYS,@GetStatistics),@AddToRoomCount,#iNum=iRID);
         Send(poRoom,@Teleport,#what=who);

         if iPublic
         {
            plPlayersLoggedOn = Send(SYS,@GetUsersLoggedOn);
         
            for i in plPlayersLoggedOn
            {
               Send(i,@MsgSendUser,#message_rsc=public_survival_started,
                                   #parm1=Send(who,@GetTrueName));
            }
         }
      }
      
      return poRoom;
   }

   GetNextAvailableRID()
   {
      local iRID, i, bExists;

      iRID = RID_SURVIVAL_START;

      if plSurvivalRooms = $
      {
         return iRID;
      }

      while iRID <= RID_SURVIVAL_END
      {
         bExists = FALSE;
         for i in plSurvivalRooms
         {
            if Send(i,@GetRoomNum) = iRID
            {
               bExists = TRUE;
            }
         }
         
         if NOT bExists
         {
            return iRID;
         }
         
         iRID = iRID + 1;
      }

      return 0;
   }
   
   FindRoomByGuild(oGuild=$)
   {
      local i;
      
      for i in plSurvivalRooms
      {
         if Send(i,@GetGuildAssociation) = oGuild
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }
      
      return $;
   }
   
   FindPublicRoom()
   {
      local i;
      
      for i in plSurvivalRooms
      {
         if Send(i,@GetPublicStatus) = TRUE
            AND Send(i,@GetAllowJoins)
         {
            return i;
         }
      }
      
      return $;
   }

   RoomDeleted(what = $)
   {
      local plUsers, i;

      if plSurvivalRooms <> $
         AND FindListElem(plSurvivalRooms,what) <> 0
      {
         if Send(what,@GetPublicStatus)
         {
            plUsers = Send(SYS,@GetUsersLoggedOn);
            for i in plUsers
            {
               Send(i,@MsgSendUser,#message_rsc=public_ended,
                                   #parm1=Send(what,@GetLevel));
            }
         }

         plSurvivalRooms = DelListElem(plSurvivalRooms,what);
      }

      return;
   }
   
   GetPublicSurvivalEnabled()
   {
      return piPublicSurvivalEnabled;
   }
   
   GetGuildSurvivalEnabled()
   {
      return piGuildSurvivalEnabled;
   }
   
   GetSoloSurvivalEnabled()
   {
      return piSoloSurvivalEnabled;
   }
   
   GetSurvivalXP()
   {
      return piSurvivalXP;
   }
   
   GetSurvivalCash()
   {
      return piSurvivalCash;
   }
   
   GetSurvivalTP()
   {
      return piSurvivalTP;
   }
   
   GetSurvivalLoot()
   {
      return piSurvivalLoot;
   }
   
   ExcludeRID(iRID=RID_MAR_SMITHY)
   {
      if plExcludedRoomsList = $
         OR FindListElem(plExcludedRoomsList,iRID) = 0
      {
         plExcludedRoomsList = Cons(iRID,plExcludedRoomsList);
      }

      return;
   }
   
   AllowRID(iRID=0)
   {
      if plExcludedRoomsList <> $
         AND FindListElem(plExcludedRoomsList,iRID) <> 0
      {
         plExcludedRoomsList = DelListElem(plExcludedRoomsList,iRID);
      }

      return;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
