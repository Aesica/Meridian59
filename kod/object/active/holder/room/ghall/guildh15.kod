% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
GuildHall15 is GuildHall

constants:

   SECRET_SECTOR = 1
   SECRET_H_DN = 0
   SECRET_H_UP = 96
   ENTRANCE_SECTOR = 2
   ENTRANCE_H_DN = 10
   ENTRANCE_H_UP = 200
   
   LIFT_DELAY = 13000

   LEVER_REACTIVATE_DELAY = 2000    % 2 seconds

   TREASURE_ROW_MIN = 6
   TREASURE_ROW_MAX = 9
   TREASURE_COL_MIN = 40
   TREASURE_COL_MAX = 43
       
   include blakston.khd

resources:

   room_name_guildh15 = "Inner Sanctum of Queen Venya'cyr"
   room_guildh15 = guildh15.roo

   Guildh15_lever_desc = \
      "This lever is clearly of archaic design, yet it seems to be in "
      "pristine condition.  You can't help but wonder what it controls."
   Guildh15_lever_icon = neclever.bgf

   Guildhall15_loop = necloop3.wav
   Guildhall15_music = nec03.mp3

   guildh15_guildwarning = \
      "Your amulet vibrates vigorously for a moment.  Something is amiss."

classvars:

   vrName = room_name_guildh15

   viTeleport_row = 13
   viTeleport_col = 14

   viNews_row = 16
   viNews_col = 47
   viNews_finerow = 52
   viNews_finecol = 56

   viFoyer_north = 0
   viFoyer_south = 27
   viFoyer_west = 0
   viFoyer_east = 31

   viLever_row = 7
   viLever_col = 9
   viLever_fine_row = 32
   viLever_fine_col = 32

   viQuality = 4

   viInner_teleport_row = 13
   viInner_teleport_col = 42
   viSeconds_til_close = 24
   
   viTerrain_type = TERRAIN_GUILDHALL | TERRAIN_NECROPOLIS | TERRAIN_LAIR

properties:

   prMusic = Guildhall15_music

   prRoom = room_guildh15
   piRoom_num = RID_guildh15

   piBaseLight = LIGHT_NICE

   ptSecret = $
   ptEntrance = $

   plLevers = $
   ptReactivateLevers = $

messages:

   Constructor()
   {
      plGuild_doors = [[12,30],[13,30],[14,30]];
      plLooping_sounds = [[ Guildhall15_loop, 0, 0, 200, 100 ]];

      propagate;
   }


   CreateStandardExits()
   {
      plExits = $;

  %% TO TOWN
%      plExits = Cons([ 2, 3, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 1, 3, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 1, 4, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 1, 5, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 3, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 4, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);
      plExits = Cons([ 2, 5, RID_LICH_MAZE, 42, 27, ROTATE_NONE ],plExits);

      propagate;
   }

   Delete()
   {
      if ptSecret <> $ {
         DeleteTimer(ptSecret);
         ptSecret=$;
      }
      if ptEntrance <> $ {
         DeleteTimer(ptEntrance);
         ptEntrance = $;
      }
      plLevers = $;
      if ptReactivateLevers <> $ {
         DeleteTimer(ptReactivateLevers);
         ptReactivateLevers = $;
      }

      propagate;
   }

   IsMoveOK(old_row = 1, old_col = 1, old_fine_row = 1, old_fine_col = 1,
            new_row = 1, new_col = 1, new_fine_row = 1, new_fine_col = 1,
            who = $)
   {
      % Hardcoded movement check, prevent hacking into hall.
      % Basic requirement door must not be open. Not technically
      % a guildhall but treating it like one just in case that
      % functionality is ever returned.
      if ptEntrance = $
      {
         % This hall is unique in having a massive door, which players can
         % get stuck on if it goes up. If there are players on the door
         % when it goes up, teleport them to the foyer or inside the hall.
         if old_row <= 15 AND old_row >= 11
            AND old_col >= 30 AND old_col <= 32
         {
            % We're probably in the door. Move players in the appropriate
            % direction.
            if (old_col = 31 AND old_fine_col > 40)
               OR old_col >= 32
            {
               % Hall.
               Send(SYS,@UtilGoNearSquare,#what=who,#where=self,
                     #new_row=13,#new_col=33,#fine_row=28,#fine_col=29);
            }
            else
            {
               if old_col = 30 AND old_fine_col < 10
               {
                  % Foyer, but outside the door.
                  return TRUE;
               }
               else
               {
                  % Inside door, foyer side or close enough to not risk it.
                  Send(SYS,@UtilGoNearSquare,#what=who,#where=self,
                        #new_row=13,#new_col=30,#fine_row=19,#fine_col=7);
               }
            }

            return TRUE;
         }

         if Send(self,@InFoyer,#who=who)
         {
            % We're in the foyer. Check if we're trying to move into the hall.
            if NOT Send(self,@InFoyer,#iRow=new_row,#iCol=new_col,
                        #iFineCol=new_fine_col,#iFineRow=new_fine_row)
            {
               % Bad player! Fail the attempt.
               return FALSE;
            }
         }
      }

      return TRUE;
   }

   InFoyer(who=$,iRow=$,iCol=$,iFineRow=$,iFineCol=$)
   {
      if who <> $
      {
         if Send(who,@GetOwner) <> self
         {
            return FALSE;
         }

         iRow = Send(who,@GetRow);
         iCol = Send(who,@GetCol);
         iFineCol = Send(who,@GetFineCol);
         iFineRow = Send(who,@GetFineRow);
      }

      if iRow >= viFoyer_north
         AND iRow <= viFoyer_South
         AND iCol >= viFoyer_west
      {
         if iCol <= viFoyer_east
         {
            return TRUE;
         }

         if iCol = 32
            AND iFineCol < 29
         {
            return TRUE;
         }
      }

      return FALSE;
   }

   SomethingTryGo(what=$, row=$,  col = $)
   {
      if ((row = 12) OR (row = 13) OR (row = 14) )
         AND ((col = 31) OR (col = 32) OR (col = 33))
      {
         Send(self,@OpenEntranceDoor);

         return TRUE;
      }

      if (poGuild_Owner=$)
         AND (row=19)
         AND ((col=13) OR (col=14) OR (col=15))
      {
         Send(self,@OpenSecretDoor);
      }

      propagate;
   }

   OpenEntranceDoor()
   {
      if ptEntrance = $
      {
         Send(self,@TimeStampDoor);
         Send(self,@SetSector,#sector=ENTRANCE_SECTOR,
               #animation=ANIMATE_FLOOR_LIFT,
               #height=ENTRANCE_H_DN,#speed=50);
         ptEntrance=CreateTimer(self,@CloseEntranceDoor,LIFT_DELAY);
         Send(self,@OpenEntranceDoorSound);
      }

      return;
   }

   CloseEntranceDoor()
   {
      ptEntrance = $;
      Send(self,@SetSector,#sector=ENTRANCE_SECTOR,
            #animation=ANIMATE_FLOOR_LIFT,
            #height=ENTRANCE_H_UP,#speed=120);
      Send(self,@CloseEntranceDoorSound);

      return;
   }


   OpenSecretDoor()
   {
      if ptSecret = $
      {
         Send(self,@SetSector,#sector=SECRET_SECTOR,
               #animation=ANIMATE_CEILING_LIFT,
               #height=SECRET_H_UP,#speed=16);
         ptSecret = CreateTimer(self,@CloseSecretDoor,LIFT_DELAY);
         Send(self,@OpenSecretDoorSound);
      }

      return;
   }

   CloseSecretDoor()
   {
      ptSecret = $;
      Send(self,@SetSector,#sector=SECRET_SECTOR,
            #animation=ANIMATE_CEILING_LIFT,
            #height=SECRET_H_DN,#speed=16);
      Send(self,@CloseSecretDoorSound);

      return;
   }

   CreateStandardObjects()
   {
      local oLever;

      % Create ornamental items.
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_SACRIFICIALBOWL),
            #new_row=4,#new_col=14,
            #fine_row=0,#fine_col=0,
            #angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_SKULL10),
            #new_row=4,#new_col=15,
            #fine_row=0,#fine_col=0,
            #angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_SACRIFICIALBOWL),
            #new_row=4,#new_col=13,
            #fine_row=0,#fine_col=0,
            #angle=ANGLE_EAST);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_GOATHEAD),
            #new_row=6,#new_col=42,
            #fine_row=8,#fine_col=8,
            #new_angle=ANGLE_SOUTH);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_GOATHEAD),
            #new_row=20,#new_col=42,
            #fine_row=48,#fine_col=48,
            #new_angle=ANGLE_NORTH);
      Send(self,@NewHold,#what=Create(&OrnamentalObject,#type=OO_GOATHEAD),
            #new_row=3,#new_col=10,
            #fine_row=16,#fine_col=24,
            #new_angle=ANGLE_SOUTH_EAST);

      % Create either lich body or lich herself.
      if poGuild_owner = $
      {
         Send(self,@NewHold,#what=Create(&DeadLich),
               #new_row=13,#new_col=49,
               #fine_row=16,#fine_col=00,
               #new_angle=ANGLE_WEST);
      }
      else
      {
         Send(self,@NewHold,#what=Create(&Lich,#oNecromancerGuild=poGuild_owner),
               #new_row=13,#new_col=49,
               #fine_row=16,#fine_col=00,
               #new_angle=ANGLE_WEST);
      }

      % Create the chest.
      Send(self,@NewHold,#what=Create(&Chest),
            #new_row=23,#new_col=14,#new_angle=ANGLE_NORTH);

      % Create the levers.
      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=22,#new_col=11,
            #fine_row=48,#fine_col=55,
            #new_angle=ANGLE_EAST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=23,#new_col=11,
            #fine_row=32,#fine_col=55,
            #new_angle=ANGLE_EAST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=24,#new_col=11,
            #fine_row=16,#fine_col=55,
            #new_angle=ANGLE_EAST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=13,
            #fine_row=55,#fine_col=16,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=14,
            #fine_row=55,#fine_col=00,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=14,
            #fine_row=55,#fine_col=48,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=25,#new_col=15,
            #fine_row=55,#fine_col=32,
            #new_angle=ANGLE_NORTH);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=24,#new_col=16,
            #fine_row=16,#fine_col=55,
            #new_angle=ANGLE_WEST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=23,#new_col=16,
            #fine_row=32,#fine_col=55,
            #new_angle=ANGLE_WEST);

      oLever = Create(&Lever,#description=Guildh15_lever_desc,
                     #icon=Guildh15_lever_icon,#range=2);
      plLevers = Cons(oLever,plLevers);
      Send(self,@NewHold,#what=oLever,
            #new_row=22,#new_col=16,
            #fine_row=48,#fine_col=55,
            #new_angle=ANGLE_WEST);

      propagate;
   }

   CreateShieldLever()
   {
      return;
   }

%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Maze control lever code %
%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
   SomethingChanged(what=$)
   {
      local oLever, i;

      if IsClass(what,&Lever)
      {
         for oLever in plLevers
         {
            if what = oLever
            {
               Send(Send(SYS,@FindRoomByNum,#num=RID_LICH_MAZE),@LeverPulled,
                     #num=FindListElem(plLevers,oLever));
               for i in plLevers
               {
                  Send(i,@SetStuck,#newStuck=TRUE);
               }
               ptReactivateLevers =
                     CreateTimer(self,@ReactivateLevers,LEVER_REACTIVATE_DELAY);
            }
         }
      }

      propagate;
   }

   ReactivateLevers()
   {
      local i;
      ptReactivateLevers = $;

      for i in plLevers
      {
         Send(i,@SetStuck,#newStuck=FALSE);
      }

      return;
   }

   GetTreasureRow()
   {
      return Random(TREASURE_ROW_MIN,TREASURE_ROW_MAX);
   }
   GetTreasureCol()
   {
      return Random(TREASURE_COL_MIN,TREASURE_COL_MAX);
   }

   GetPurchaseValue(who=$)
   "This returns the value that the GuildCreator will sell the guild to."
   "When the guild has been conquered, he will only sell the guild hall to "
   "someone in the Conquering guild."
   "return -1 if this player cannot rent this guild hall."
   {
      return -1;   %% A player can never normally rent this guild hall.
   }

   NewHold(what=$)
   {
      local oNecroGuild,lMembers,oNecro,iChance;

      if IsClass(what,&User)
         AND NOT IsClass(what,&DM)
      {
         oNecroGuild = Send(Send(SYS,@FindRoomByNum,
                           #num=RID_GUILDH15),@GetGuildOwner);
         if oNecroGuild <> $
         {
            if NOT Send(what,@IsUsingA,#Class=&NecromancerAmulet)
            {
               iChance = 2;
               if (Send(what,@FindHoldingActive,#class=&HunterSword)<>$)
               {
                  iChance = iChance/2;
               }
               if Random(1,iChance)=1
               {
                  lMembers = Send(oNecroGuild,@GetMemberList);
                  oNecro = First(Nth(lMembers,Random(1,length(lMembers))));
                  if Send(oNecro,@isLoggedOn)
                  {
                     Send(oNecro,@MsgSendUser,
                           #message_rsc=guildh15_guildwarning);
                  }
               }
            }
         }
      }

      propagate;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
