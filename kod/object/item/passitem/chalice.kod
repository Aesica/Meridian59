% Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
% All rights reserved.
%
% This software is distributed under a license that is described in
% the LICENSE file that accompanies it.
%
% Meridian is a registered trademark.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Chalice is PassiveItem

constants:

   include blakston.khd


resources:

   chalice_name_rsc = "Chalice of the Rain"
   chalice_icon_rsc = chalice.bgf
   chalice_desc_rsc = \
      "This ornate chalice is adorned with holy markings "
      "of Shal'ille.  An inscription reads \"to catch her tears.\""

   chalice_cant_get = "You try to pick up the chalice, but it mystically clings to the stone altar."

   chalice_use = "You sip a bit of the water out of the Chalice of Rain."
   chalice_empty = "The Chalice of Rain crumbles to dust in your hand as you sip the last bit of water from it."
   chalice_combine = "You pour the water from one Chalice into the other."
   chalice_cant_use_pkill = "Only innocents may partake of the chalice."
   chalice_refilled = "The Chalice of Rain glows faintly for a moment, renewed by the spirit of Shal'ille that permeates the area."

   chalice_condition_exc = " filled to the brim with pure water."
   chalice_condition_exc_mended = " filled to the brim with pure water."
   chalice_condition_good = " is mostly full of fresh water."
   chalice_condition_med = " has a few sips of water remaining."
   chalice_condition_poor = " is almost empty."
   chalice_condition_broken = " is completely empty and its magic has faded."

classvars:

   vrName = chalice_name_rsc
   vrIcon = chalice_icon_rsc
   vrDesc = chalice_desc_rsc

   viUse_type = ITEM_SINGLE_USE

   viObject_flags = GETTABLE_YES

   viBulk = 20
   viWeight = 20

   viHits_init_min = 3
   viHits_init_max = 5

   viValue_average = 500

   vbShow_condition = TRUE
   vrCondition_exc =   chalice_condition_exc
   vrCondition_exc_mended = chalice_condition_exc_mended
   vrCondition_good =  chalice_condition_good
   vrCondition_med =   chalice_condition_med
   vrCondition_poor =  chalice_condition_poor
   vrCondition_broken = chalice_condition_broken

properties:

   poLastOwner = $
   
messages:

   ReqNewOwner(what=$)
   {
      if poOwner = send(SYS,@FindRoomByNum,#num=RID_CAVE2)
         AND send(self,@GetRow)=23 AND send(self,@GetCol)=11
         AND NOT send(poOwner,@OkayToGetChalice)
      {
         send(what,@MsgSendUser,#message_rsc=chalice_cant_get);

         return FALSE;
      }

      return TRUE;
   }

   NewOwner(what = $)
   {
      local oOtherChalice;

      if what = $
      {
         propagate;
      }

      % If we drop it in a room with a high Shal'ille bonus, refill the chalice
      % And inform the last owner (if any) that the chalice has been refilled
      if IsClass(what,&Room)
         AND send(what,@GetShalilleBonus) > 20
         AND piHits < piHits_init
      {
         if poLastOwner <> $
         {
            send(poLastOwner, @MsgSendUser, #message_rsc = chalice_refilled);
         }
         piHits = piHits_init;
      }

      if IsClass(what,&User)
      {
         % If a user already has a chalice, then "combine" them.
         % Get the second chalice in sequence.  This is the one the
         % user was originally holding, if any.

         oOtherChalice = send(what,@FindHolding,#class=&Chalice,#sequence=2);

         if oOtherChalice <> $
            AND NOT (IsClass(what,&DM) AND send(what,@PlayerIsImmortal))
         {
            send(what,@MsgSendUser,#message_rsc=chalice_combine);
            send(oOtherChalice,@SetHits,#number=send(oOtherChalice,@GetHits)+piHits);
            post(self,@Delete);
         }
         else
         {
            % Otherwise, mark the user as the most recent owner
            poLastOwner = what;
         }
      }

      propagate;
   }

	DestroyDisposable()
	{
		if poOwner = send(SYS,@FindRoomByNum,#num=RID_CAVE2)
		{
			return FALSE;
		}
		
		propagate;
	}

   ReqNewApply(what = $, apply_on = $)
   {
      if (IsClass(what,&Player))
      {
         % Prevent use if you're red.  This is because player killers
         % were using this to escape too easily after kills.
         if Send(what,@CheckPlayerFlag,#flag=PFLAG_MURDERER)
		     OR Send(what,@CheckPlayerFlag,#flag=PFLAG_OUTLAW)
         {
            Send(what, @MsgSendUser, #message_rsc = chalice_cant_use_pkill);
            return FALSE;
         }
         
         % Prevent use if you can't fight.
         if Send(what,@CheckPlayerFlag,#flag=PFLAG_NO_FIGHT)
         {
            return FALSE;
         }
      }

      return TRUE;
   }

   NewApplied(what = $, apply_on = $)
   {
      local oRescue;
      
      piHits = piHits - 1;
      
      if piHits > 0
      {
         Send(poOwner,@MsgSendUser,#message_rsc=chalice_use);
      }
      else
      {
         Send(poOwner,@MsgSendUser,#message_rsc=chalice_empty);

         Post(self,@Delete);
      }
      
      % Cast Rescue at really low power.
      oRescue = send(SYS,@FindSpellByNum,#num=SID_RESCUE);
      Send(oRescue,@CastSpell,#who=apply_on,#iSpellPower=1,#bItemCast=TRUE);
      
      return;
   }

   SetHits(number = $)
   {
      if (number = $)
      {
         return;
      }

      piHits = number;

      if piHits > piHits_init
      {
         piHits = piHits_init;
      }

      return;
   }

   CanBeStoredInVault()   
   {
      return FALSE;
   }

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
