From 0c992c59c63335c5e83a2dd590590e67fe47a9a2 Mon Sep 17 00:00:00 2001
From: cyberjunk <clint.banzhaf@gmx.net>
Date: Thu, 20 Jun 2013 16:37:11 +0200
Subject: [PATCH] Use libarchive in "club" (rough)

---
 club/clubarchive.c | 144 +++++++++++++++++++++++++++++++++++++++++++++++++-----
 club/clubarchive.h |   2 +-
 club/club.h       |   7 +--
 club/makefile     |   2 +-
 4 files changed, 138 insertions(+), 17 deletions(-)

diff --git a/club/clubarchive.c b/club/clubarchive.c
index cbcd1a6..022537f 100644
--- a/club/clubarchive.c
+++ b/club/clubarchive.c
@@ -13,6 +13,126 @@
 
 static int extraction_error;         // Nonzero if extraction had an error
 
+static int copy_data(struct archive *ar, struct archive *aw)
+{
+	int r;
+	const void *buff;
+	size_t size;
+	long long offset;
+
+	for (;;) 
+	{
+		r = archive_read_data_block(ar, &buff, &size, &offset);
+		
+		if (r == ARCHIVE_EOF)
+			return (ARCHIVE_OK);
+		
+		if (r != ARCHIVE_OK)
+			return (r);
+		
+		r = archive_write_data_block(aw, buff, size, offset);
+		
+		if (r != ARCHIVE_OK) 
+		{
+			fprintf(stderr, "%s\n", archive_error_string(aw));
+			return (r);
+		}
+	}
+}
+
+bool IsArchive(char *filename)
+{
+	return true;
+}
+
+bool ExtractArchive(char *filename, char* destpath)
+{
+	struct archive *a;
+	struct archive *ext;
+	struct archive_entry *entry;
+	int flags;
+	int r;
+	int pathlen = strlen(destpath);
+
+	/* Select which attributes we want to restore. */
+	flags = ARCHIVE_EXTRACT_TIME;
+	flags |= ARCHIVE_EXTRACT_PERM;
+	flags |= ARCHIVE_EXTRACT_ACL;
+	flags |= ARCHIVE_EXTRACT_FFLAGS;
+
+	// read from
+	a = archive_read_new();
+	archive_read_support_format_all(a);
+	archive_read_support_compression_all(a);
+
+	// write to
+	ext = archive_write_disk_new();
+	archive_write_disk_set_options(ext, flags);
+	archive_write_disk_set_standard_lookup(ext);
+	
+	// try open archive
+	if ((r = archive_read_open_filename(a, filename, 10240)))
+		return false;
+	
+	// iterate entries
+	for (;;) 
+	{
+		// next read entry
+		r = archive_read_next_header(a, &entry);
+		
+		// end of archive? -> done
+		if (r == ARCHIVE_EOF)
+			break;
+		
+		// check error
+		if (r != ARCHIVE_OK)
+			return false;
+		
+		// get filename of entry
+		const char* filename = archive_entry_pathname(entry);
+		int filenamelen = strlen(filename);
+		
+		// build full extractionpath
+		int size = filenamelen + pathlen + 1;
+		char* fullfilepath = (char*)calloc(size, 1);
+		strcpy_s(fullfilepath, size, destpath);
+		strcat_s(fullfilepath, size, filename);
+		
+		// apply extraction path
+		archive_entry_set_pathname(entry, fullfilepath);
+
+		// extract header
+		r = archive_write_header(ext, entry);
+		
+		if (r != ARCHIVE_OK)
+			return false;
+
+		else if (archive_entry_size(entry) > 0) 
+		{
+			// extract file data
+			copy_data(a, ext);
+			
+			if (r != ARCHIVE_OK)
+				return false;
+		}
+	
+		// finish this entry
+		r = archive_write_finish_entry(ext);
+		
+		// check for errors
+		if (r != ARCHIVE_OK)
+			return false;
+	}
+	
+	archive_read_close(a);
+	archive_read_free(a);
+	archive_write_close(ext);
+	archive_write_free(ext);
+
+	// successful
+	return true;
+}
+
 void Dearchive(char *dest_path, char *filename)
 {
    char msg[500];
@@ -20,35 +140,35 @@ void Dearchive(char *dest_path, char *filename)
    SetDlgItemText(hwndMain,IDC_STATUS,GetString(hInst, IDS_UNARCHIVING));
 
    // Make sure archive is legal
-   WrapInit();
+   //WrapInit();
 
    // Does file exist?
    struct stat s;
    if (stat(filename, &s) != 0)
    {
       SetDlgItemText(hwndMain,IDC_STATUS, GetString(hInst, IDS_MISSINGFILE));   
-      WrapShutdown();
+      //WrapShutdown();
       return;
    }
 
-   if (!WrapIsArchive(filename))
+   if (!IsArchive(filename))
    {
       SetDlgItemText(hwndMain, IDC_STATUS, GetString(hInst, IDS_FILECORRUPT));
-      WrapShutdown();
+      //WrapShutdown();
       return;
    }
 
-   WrapSetExtractionCallback(UnarchiveProgressCallback);
+   //WrapSetExtractionCallback(UnarchiveProgressCallback);
 
    while (1)
    {
-      char temp_path[MAX_PATH];
+      //char temp_path[MAX_PATH];
       extraction_error = 0;
       
       // Crusher's default temp directory doesn't work well in Vista or later;
       // can't extract if installed in Program Files.
-      GetTempPath(sizeof(temp_path), temp_path);
-      WrapExtractArchive(filename, dest_path, temp_path);
+      //GetTempPath(sizeof(temp_path), temp_path);
+      ExtractArchive(filename, dest_path);
       
       if (extraction_error == 0)
       {
@@ -66,8 +186,8 @@ void Dearchive(char *dest_path, char *filename)
    }
    
    unlink(filename);
-   WrapSetExtractionCallback(NULL);
-   WrapShutdown();
+   //WrapSetExtractionCallback(NULL);
+   //WrapShutdown();
 
    if (success)
    {
@@ -80,7 +200,7 @@ void Dearchive(char *dest_path, char *filename)
 /*
  * UnarchiveProgressCallback:  Callback function for each file in an archive.
  */
-bool UnarchiveProgressCallback(const char *filename, ExtractionStatus status)
+/*bool UnarchiveProgressCallback(const char *filename, ExtractionStatus status)
 {
    switch (status)
    {
@@ -116,4 +236,4 @@ bool UnarchiveProgressCallback(const char *filename, ExtractionStatus status)
       extraction_error = IDS_UNKNOWNERROR;
 
    return true;
-}
+}*/
diff --git a/club/clubarchive.h b/club/clubarchive.h
index 3d0d049..1e4a085 100644
--- a/club/clubarchive.h
+++ b/club/clubarchive.h
@@ -13,6 +13,6 @@
 #define _ARCHIVE_H
 
 void Dearchive(char *dest_path, char *filename);
-bool UnarchiveProgressCallback(const char *filename, ExtractionStatus status);
+//bool UnarchiveProgressCallback(const char *filename, ExtractionStatus status);
 
 #endif _ARCHIVE_H
diff --git a/club/club.h b/club/club.h
index 9bbae2e..03a85a0 100644
--- a/club/club.h
+++ b/club/club.h
@@ -37,13 +37,14 @@
 #define CM_PROGRESS   (WM_USER + 1006)
 
 #include "resource.h"
-
-#include "wrap.h"
-
 #include "clubarchive.h"
 #include "util.h"
 #include "transfer.h"
 
+/* libarchive */
+#include "archive.h"
+#include "archive_entry.h"
+
 #define sprintf wsprintf
 
 
diff --git a/club/makefile b/club/makefile
index 96251c5..9ef137a 100644
--- a/club/makefile
+++ b/club/makefile
@@ -3,7 +3,7 @@ TOPDIR=..
 
 SOURCEDIR = $(TOPDIR)\club
 
-CLUBLIBS = user32.lib gdi32.lib wrap.lib comctl32.lib wininet.lib
+CLUBLIBS = user32.lib gdi32.lib archive.lib comctl32.lib wininet.lib
 
 all: makedirs $(OUTDIR)\club.exe
 
-- 
1.8.5.1
